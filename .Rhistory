ggplot(data = ad) +
geom_bar(mapping = aes (x= ad_received_reason, y = ..prop.., group = 1,
fill = ad_received_reason)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(legend.position = "none")
ggplot(data = ad) +
geom_bar(mapping = aes (x= ad_received_reason, y = ..prop.., group = 1,
fill = ad_received_reason)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(legend.position = "none")
ggplot(data = ad) +
geom_bar(mapping = aes (x= ad_received_reason, y = ..prop.., group = 2,
fill = ad_received_reason)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(legend.position = "none")
ggplot(data = ad) +
geom_bar(mapping = aes (x= ad_received_reason, y = ..prop.., group = 0,
fill = ad_received_reason)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(legend.position = "none")
ggplot(data = ad) +
geom_bar(mapping = aes (x= ad_received_reason, y = ..prop..,
fill = ad_received_reason)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(legend.position = "none")
ggplot(data = ad) +
geom_bar(mapping = aes (x= ad_received_reason, y = ..prop..,
fill = ad_received_reason, position = identity)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(legend.position = "none")
ggplot(data = ad) +
geom_bar(mapping = aes (x= ad_received_reason, y = ..prop..,
fill = ad_received_reason, position = "identity")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(legend.position = "none")
ggplot(data = ad) +
geom_bar(mapping = aes (x= ad_received_reason, y = ..prop..,
fill = ad_received_reason, position = "fill")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(legend.position = "none")
ggplot(data = ad) +
geom_bar(mapping = aes (x= ad_received_reason, y = ..prop.., position = "fill")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(legend.position = "none")
ggplot(data = ad) +
geom_bar(mapping = aes (x= ad_received_reason, y = ..prop.., position = "Identity")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(legend.position = "none")
ggplot(data = ad) +
geom_bar(mapping = aes (x= ad_received_reason, y = ..prop.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(legend.position = "none")
ggplot(data = ad) +
geom_bar(mapping = aes (x= name, fill = name)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
ggtitle("Contributors in the ad data set") +
theme(legend.position = "none")
ggplot(data = ad) +
geom_bar(mapping = aes (x= ad_received_reason, fill = ad_received_reason)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(legend.position = "none")
ggplot(data = ad) +
geom_bar(mapping = aes (x= name, fill = name)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
ggtitle("Contributors in the ad data set") +
theme(legend.position = "none") +
theme(plot.title = element_text(hjust=0.5))
ggplot(data = ad) +
geom_bar(mapping = aes (x= ad_received_reason, fill = ad_received_reason)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
theme(legend.position = "none")
ggplot(data = web) +
geom_bar(mapping = aes (x= Member, fill = Member)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
ggtitle("Contributors in the web data set") +
theme(plot.title = element_text(hjust=0.5)) +
theme(legend.position = "none")
library(tm)
install.packages(tm)
install.packages("tm")
library(tm)
library(tm)
library(SnowballC)
install.packages("SnowballC")
library(SnowballC)
install.packages("wordcloud")
install.packages("igraph")
install.packages("lsa")
install.packages("LSAfun")
install.packages("topicmodels")
install.packages("text2vec")
install.packages("e1071")
library(tm)
library(ggplot2)
library(SnowballC)
library(igraph)
library(lsa)
library(LSAfun)
library(topicmodels)
library(text2vec)
library(e1071)
library(tm)
library(ggplot2)
library(SnowballC)
library(igraph)
library(lsa)
library(LSAfun)
library(LSAfun)
library(topicmodels)
library(text2vec)
library(e1071)
library(lsa)
library(LSAfun)
install.packages("LSAfun")
library(LSAfun)
#this exercise uses the text8 file in the DAM_BS4 folder
install.packages("text2vec")
rm(list=ls())
library(text2vec)
# Load or download the wikipedia text8 dataset (first 10^9 bytes of the
#English Wikipedia dump on Mar. 3, 2006. )
text8_file = "./text8"
# Load or download the wikipedia text8 dataset (first 10^9 bytes of the
#English Wikipedia dump on Mar. 3, 2006. )
text8_file = "./text8"
library(rvest)
install.packages("rvest")
install.packages("rvest")
install.packages("rvest")
library(rvest)
library(rvest)
html < - read_html(https://racing.hkjc.com/racing/information/English/Horse/Horse.aspx?HorseId=HK_2018_C297)
html < - read_html("https://racing.hkjc.com/racing/information/English/Horse/Horse.aspx?HorseId=HK_2018_C297")
install.packages("rvest")
library(rvest)
html < - read_html("https://racing.hkjc.com/racing/information/English/Horse/Horse.aspx?HorseId=HK_2018_C297")
html < - read_html(https://racing.hkjc.com/racing/information/English/Horse/Horse.aspx?HorseId=HK_2018_C297)
class(html)
html < - read_html(https://racing.hkjc.com/racing/information/English/Horse/Horse.aspx?HorseId=HK_2018_C297)
html < - read_html("https://racing.hkjc.com/racing/information/English/Horse/Horse.aspx?HorseId=HK_2018_C297")
html < - read_html("<a href="https://racing.hkjc.com/racing/information/English/Horse/Horse.aspx?HorseId=HK_2018_C297">https://racing.hkjc.com/racing/information/English/Horse/Horse.aspx?HorseId=HK_2018_C297</a>")
html < - read_html(<a href="https://racing.hkjc.com/racing/information/English/Horse/Horse.aspx?HorseId=HK_2018_C297">https://racing.hkjc.com/racing/information/English/Horse/Horse.aspx?HorseId=HK_2018_C297</a>)
html < - read_html(<p><a href="https://racing.hkjc.com/racing/information/English/Horse/Horse.aspx?HorseId=HK_2018_C297">https://racing.hkjc.com/racing/information/English/Horse/Horse.aspx?HorseId=HK_2018_C297</a></p>)
<p>
<a href="https://racing.hkjc.com/racing/information/English/Horse/Horse.aspx?HorseId=HK_2018_C297">https://racing.hkjc.com/racing/information/English/Horse/Horse.aspx?HorseId=HK_2018_C297</a></p>
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(Iris)
library(datasets)
data(iris)
summary(iris)
library(datasets)
data(iris)
summary(iris)
str(iris)
str(datasets)
data(mpg)
explore(iris)
library(datasets)
data(iris)
summary(iris)
str(iris)
library(datasets)
data(iris)
str(iris)
library(zoo)
library(xts)
library(TTR)
library(quantmod)
library(ggplot2)
library(dplyr)
library(PerformanceAnalytics)
library(corrplot)
#Define data loading
Symbols<-c("BTC-USD","ETH-USD","ADA-USD","BNB-USD","USDT-USD","DX-Y.NYB","GC=F","TSLA")
length(Symbols)
#Set start date
start_date=as.Date("2014-01-01")
#Set date
d <- as.POSIXlt(as.Date(Sys.Date()))
dyear <- d
dyear$year <- dyear$year-1
#Get data from Yahoo for stock
data <- getSymbols(Symbols,
src='yahoo',
#from=dyear,
symbol.lookup = TRUE,
#to=d,
autoassign=FALSE,
from=start_date)
na.omit(`BTC-USD`,`ETH-USD`,`ADA-USD`,`BNB-USD`,`USDT-USD`,`DX-Y.NYB`,GC=F,TSLA)
#Put data in dataframe
df1 <- fortify(`BTC-USD`)
df2 <- fortify(`ETH-USD`)
df3 <- fortify(`ADA-USD`)
df4 <- fortify(`BNB-USD`)
df5 <- fortify(`USDT-USD`)
df6 <- fortify(`DX-Y.NYB`)
df7 <- fortify(`GC=F`)
df8 <- fortify(TSLA)
#Combine data in one file
df <- full_join(df1, df2,by = "Index")
df <- full_join(df, df3, by = "Index")
df <- full_join(df, df4, by = "Index")
df <- full_join(df, df5, by = "Index")
df <- full_join(df, df6, by = "Index")
df <- full_join(df, df7, by = "Index")
df <- full_join(df, df8, by = "Index")
attach(df)
#Correlation matrix
dfc <- df[, c(5,11,17,23,29,35,41,47)]
chart.Correlation(dfc, histogram=TRUE, pch=19)
#correlogram
dfcm <- cor(dfc, use= "complete.obs")
corrplot(dfcm, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
knitr::opts_chunk$set(echo = TRUE)
library(rvest)
library(stringr)
library(tidyverse)
path = "https://bitinfocharts.com/comparison/decred-tweets.html#1y"
scripts <- read_html(path, encoding = 'utf8') %>%
html_nodes("script") %>% html_text(trim=TRUE)
Filter special characters, get date and tweet volume only
scripts <- read_html(path, encoding = 'utf8') %>%
html_nodes("script") %>% html_text(trim=TRUE)
text <- scripts[5]
new <- strsplit(text, '\\[\\[')[[1]][[2]]
new2 <- strsplit(new, '\\]\\]')[[1]][[1]]
new3 <- str_replace_all(new2, 'new Date\\(', '')  %>%
str_replace_all('\\[', '') %>%
str_replace_all('"', '') %>%
str_replace_all('\\]', '') %>%
str_replace_all('\\)', '')
new4 <- strsplit(new3, ',')
table <- as.data.frame(unlist(new4))
tweet_volume =  data.frame(date = table[c(TRUE,FALSE),], tweet_count = table[c(FALSE,TRUE),])
tweet_volume$tweet_count <- as.numeric(tweet_volume$tweet_count)*1000
tweet_volume$date <- as.date(tweet_volume$date)
tweet_volume$date <- as.Date(tweet_volume$date)
tweet_volume$tweet_count <- as.numeric(tweet_volume$tweet_count)*1000
tweet_volume$date <- as.Date(tweet_volume$date)
library(rvest)
library(stringr)
library(tidyverse)
path = "https://bitinfocharts.com/comparison/decred-tweets.html#1y"
scripts <- read_html(path, encoding = 'utf8') %>%
html_nodes("script") %>% html_text(trim=TRUE)
text <- scripts[5]
new <- strsplit(text, '\\[\\[')[[1]][[2]]
new2 <- strsplit(new, '\\]\\]')[[1]][[1]]
new3 <- str_replace_all(new2, 'new Date\\(', '')  %>%
str_replace_all('\\[', '') %>%
str_replace_all('"', '') %>%
str_replace_all('\\]', '') %>%
str_replace_all('\\)', '')
new4 <- strsplit(new3, ',')
table <- as.data.frame(unlist(new4))
tweet_volume =  data.frame(date = table[c(TRUE,FALSE),], tweet_count = table[c(FALSE,TRUE),])
tweet_volume$tweet_count <- as.numeric(tweet_volume$tweet_count)*1000
tweet_volume$date <- as.Date(tweet_volume$date)
library(rvest)
library(stringr)
library(tidyverse)
path = "https://bitinfocharts.com/comparison/decred-tweets.html#1y"
scripts <- read_html(path, encoding = 'utf8') %>%
html_nodes("script") %>% html_text(trim=TRUE)
text <- scripts[5]
new <- strsplit(text, '\\[\\[')[[1]][[2]]
new2 <- strsplit(new, '\\]\\]')[[1]][[1]]
new3 <- str_replace_all(new2, 'new Date\\(', '')  %>%
str_replace_all('\\[', '') %>%
str_replace_all('"', '') %>%
str_replace_all('\\]', '') %>%
str_replace_all('\\)', '')
new4 <- strsplit(new3, ',')
table <- as.data.frame(unlist(new4))
tweet_volume =  data.frame(date = table[c(TRUE,FALSE),], tweet_count = table[c(FALSE,TRUE),])
tweet_volume$tweet_count <- as.numeric(tweet_volume$tweet_count)*1000
tweet_volume$tweet_count <- as.numeric(tweet_volume$tweet_count, rm.na = TRUE)*1000
tweet_volume$date <- as.Date(tweet_volume$date)
tweet_volume$tweet_count <- as.numeric(tweet_volume$tweet_count, rm.na = TRUE)*1000
tweet_volume$date <- as.Date(tweet_volume$date)
View(tweet_volume$tweet_count)
View(tweet_volume)
library(rvest)
library(stringr)
library(tidyverse)
path = "https://bitinfocharts.com/comparison/decred-tweets.html#1y"
scripts <- read_html(path, encoding = 'utf8') %>%
html_nodes("script") %>% html_text(trim=TRUE)
text <- scripts[5]
new <- strsplit(text, '\\[\\[')[[1]][[2]]
new2 <- strsplit(new, '\\]\\]')[[1]][[1]]
new3 <- str_replace_all(new2, 'new Date\\(', '')  %>%
str_replace_all('\\[', '') %>%
str_replace_all('"', '') %>%
str_replace_all('\\]', '') %>%
str_replace_all('\\)', '')
new4 <- strsplit(new3, ',')
table <- as.data.frame(unlist(new4))
tweet_volume =  data.frame(date = table[c(TRUE,FALSE),], tweet_count = table[c(FALSE,TRUE),])
View(tweet_volume)
tweet_volume$tweet_count <- as.numeric(tweet_volume$tweet_count, rm.na = TRUE)*1000
tweet_volume$date <- as.Date(tweet_volume$date)
View(tweet_volume$tweet_count)
library(rvest)
library(stringr)
library(tidyverse)
#Get HTML object
path = "https://bitinfocharts.com/comparison/decred-tweets.html#1y"
#[Link](https://bitinfocharts.com/comparison/decred-tweets.html#1y)
scripts <- read_html(path, encoding = 'utf8') %>%
html_nodes("script") %>% html_text(trim=TRUE)
#Filter special characters, get date and tweet volume only
text <- scripts[5]
new <- strsplit(text, '\\[\\[')[[1]][[2]]
new2 <- strsplit(new, '\\]\\]')[[1]][[1]]
new3 <- str_replace_all(new2, 'new Date\\(', '')  %>%
str_replace_all('\\[', '') %>%
str_replace_all('"', '') %>%
str_replace_all('\\]', '') %>%
str_replace_all('\\)', '')
new4 <- strsplit(new3, ',')
#Convert list of list into dataframe. Sample input ['2020/05/09',59,...]
table <- as.data.frame(unlist(new4))
#Dataframe now contains only 1 columns, subsetting odd and even rows to split into 2 columns**
tweet_volume =  data.frame(date = table[c(TRUE,FALSE),], tweet_count = table[c(FALSE,TRUE),])
#Tweet counts is reported as thousands of tweet, here convert it to normal number
tweet_volume$tweet_count <- as.numeric(tweet_volume$tweet_count, rm.na = TRUE)*1000
tweet_volume$date <- as.Date(tweet_volume$date)
tweet_volume$tweet_count <- as.numeric(tweet_volume$tweet_count, rm.na = TRUE)*1000
tweet_volume$date <- as.Date(tweet_volume$date)
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
install.packages(c("devtools"))
install.packages(c("devtools"))
if (!require('devtools')) install.packages('devtools')library(devtools)
if (!require('devtools')) install.packages('devtools')
library(devtools)
devtools::install_github("ldurazo/kaggler")
library(devtools)
library(readr)
library(kaggler)
library(kaggle)
rm(list=ls())
library(zoo)
library(xts)
library(TTR)
library(quantmod)
library(ggplot2)
coin_portfolio=c("BTC-USD","ETH-USD","ADA-USD",
"DOGE-USD","SHIB-USD")
stockindex_portfolio=c("^DJI","^IXIC","^GSPC")
stock_portfolio=c("TSLA","GOOG","AAPL","NVDA","AMD","TSM")
data <- getSymbols(c(coin_portfolio,
stockindex_portfolio,
stock_portfolio),
src='yahoo',
#from=dyear,
#to=d,
autoassign=FALSE)
chartSeries(na.omit(merge(`BTC-USD`/100,TSLA, join="left")))
chartSeries(na.omit(merge(TSLA,DJI/100, join="left")))
Brief topic 1
cor(na.omit(merge(`BTC-USD`,TSLA,join="left")))
Topic 2
data transformation
dataBTC = data.frame(date=index(`BTC-USD`), coredata(`BTC-USD`))
dataTSLA = data.frame(date=index(TSLA), coredata(TSLA))
dataDJI = data.frame(date=index(DJI), coredata(DJI))
mdBTCTSLA = na.omit(merge(dataBTC,dataTSLA,join="left"))
lmBTCTSLA = lm(BTC.USD.Close~TSLA.Close,data=mdBTCTSLA)
summary(lmBTCTSLA)
Plot data
ggplot(mdBTCTSLA, aes(BTC.USD.Close, TSLA.Close)) +
geom_point(color='red') +
geom_smooth(method='lm')
topic 3 - within 1 year
mdBTCTSLA = na.omit(merge(dataBTC,dataTSLA,join="left"))
summary(lmBTCTSLA)
ggplot(mdBTCTSLA, aes(BTC.USD.Close, TSLA.Close)) +
geom_point(color='red') +
geom_smooth(method='lm')
mdBTCTSLA = na.omit(merge(dataBTC,dataTSLA,join="left"))
mdBTCTSLA21 <- mdBTCTSLA[mdBTCTSLA$date > "2021-01-01",]
lmBTCTSLA21 = lm(BTC.USD.Close~TSLA.Close,data=mdBTCTSLA21)
summary(lmBTCTSLA21)
ggplot(mdBTCTSLA21, aes(BTC.USD.Close, TSLA.Close)) +
geom_point(color='red') +
geom_smooth(method='lm')
ggfortify
library(ggfortify)
#ggfortify
library(ggfortify)
fit <- lm(BTC.USD.Close~TSLA.Close,data=mdBT
fit <- lm(BTC.USD.Close~TSLA.Close,data=mdBTCTSLA21)
autoplot(fit)
#ggfortify
library(ggfortify)
fit <- lm(BTC.USD.Close~TSLA.Close,data=mdBTCTSLA21)
autoplot(fit)
library(dplyr)
fit <- lm(BTC.USD.Close~TSLA.Close,data=mdBTCTSLA21)
autoplot(fit)
#ggfortify
library(ggfortify)
fit <- lm(BTC.USD.Close~TSLA.Close,data=mdBTCTSLA21)
autoplot(fit)
#ggfortify
fit <- lm(BTC.USD.Close~TSLA.Close,data=mdBTCTSLA21)
autoplot(fit)
plot(fit)
mdBTCTSLA21 <- mdBTCTSLA[mdBTCTSLA$date > "2021-01-01",]
lmBTCTSLA21 = lm(BTC.USD.Close~TSLA.Close,data=mdBTCTSLA21)
summary(lmBTCTSLA21)
ggplot(mdBTCTSLA21, aes(BTC.USD.Close, TSLA.Close)) +
geom_point(color='red') +
geom_smooth(method='lm')
#ggfortify
fit <- lm(BTC.USD.Close~TSLA.Close,data=mdBTCTSLA21)
plot(fit)
summary(lmBTCTSLA21)
ggplot(mdBTCTSLA21, aes(BTC.USD.Close, TSLA.Close)) +
geom_point(color='red') +
geom_smooth(method='lm')
#ggfortify
fit <- lm(BTC.USD.Close~TSLA.Close,data=mdBTCTSLA21)
plot(fit)
**[Figure 1 - Historical Bitcoin price]**
[Table 1](/Users/simonkwok/Downloads/PDF Finance 2/Figure 1.png)
[Figure 1 - Historical Bitcoin price]
[Table 1](/Users/simonkwok/Downloads/PDF Finance 2/Figure 1.png)
[Figure 1 - Historical Bitcoin price]
**Figure 1 - Historical Bitcoin price**
#Figure 1 - Historical Bitcoin price
[Table 1](/Users/simonkwok/Downloads/PDF Finance 2/Figure 1.png)
#Figure 1 - Historical Bitcoin price
![Table 1](/Users/simonkwok/Downloads/PDF Finance 2/Figure 1.png)
#Figure 1 - Historical Bitcoin price
![Table 1](/Users/simonkwok/Downloads/PDF Finance 2/Figure 1.png)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(zoo)
library(xts)
library(TTR)
library(quantmod)
coin_portfolio=c("BTC-USD","ETH-USD","ADA-USD",
"DOGE-USD","SHIB-USD")
index_portfolio=c("^DJI","^IXIC","^GSPC","GC=F")
stock_portfolio=c("TSLA","GOOG","AAPL","NVDA","AMD","TSM")
start_date=as.Date("2019-01-01")
data <- getSymbols(c(coin_portfolio,
index_portfolio,
stock_portfolio),
src='yahoo',
from= start_date,
#to=d,
autoassign=FALSE)
# incorporate tweet volume data prepared by Huy
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
knitr::opts_chunk$set(echo = TRUE)
tweet_volume
path = "https://bitinfocharts.com/comparison/decred-tweets.html#1y"
scripts <- read_html(path, encoding = 'utf8') %>%
html_nodes("script") %>% html_text(trim=TRUE)
# incorporate tweet volume data prepared by Huy
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
knitr::opts_chunk$set(echo = TRUE)
# incorporate tweet volume data prepared by Huy
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(zoo)
library(xts)
library(TTR)
library(quantmod)
coin_portfolio=c("BTC-USD","ETH-USD","ADA-USD",
"DOGE-USD","SHIB-USD")
index_portfolio=c("^DJI","^IXIC","^GSPC","GC=F")
stock_portfolio=c("TSLA","GOOG","AAPL","NVDA","AMD","TSM")
start_date=as.Date("2019-01-01")
data <- getSymbols(c(coin_portfolio,
index_portfolio,
stock_portfolio),
src='yahoo',
from= start_date,
#to=d,
autoassign=FALSE)
# incorporate tweet volume data prepared by Huy
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
knitr::opts_chunk$set(echo = TRUE)
# incorporate tweet volume data prepared by Huy
#install.packages(c("devtools"))
#devtools::install_github("ldurazo/kaggler")
library(readr)
library(kaggler)
# incorporate tweet volume data prepared by Huy
#install.packages(c("devtools"))
#devtools::install_github("ldurazo/kaggler")
library(readr)
library(devtools)
library(kaggler)
# incorporate tweet volume data prepared by Huy
#install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
